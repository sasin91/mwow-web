generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("AUTH_DATABASE_URL")
}

model account {
  id                       Int                        @id @default(autoincrement()) @db.UnsignedInt
  username                 String                     @unique(map: "idx_username") @default("") @db.VarChar(32)
  salt                     Bytes                      @db.Binary(32)
  verifier                 Bytes                      @db.Binary(32)
  session_key_auth         Bytes?                     @db.Binary(40)
  session_key_bnet         Bytes?                     @db.VarBinary(64)
  totp_secret              Bytes?                     @db.VarBinary(128)
  email                    String                     @default("") @db.VarChar(255)
  reg_mail                 String                     @default("") @db.VarChar(255)
  joindate                 DateTime                   @default(now()) @db.Timestamp(0)
  last_ip                  String                     @default("127.0.0.1") @db.VarChar(15)
  last_attempt_ip          String                     @default("127.0.0.1") @db.VarChar(15)
  failed_logins            Int                        @default(0) @db.UnsignedInt
  locked                   Int                        @default(0) @db.UnsignedTinyInt
  lock_country             String                     @default("00") @db.VarChar(2)
  last_login               DateTime?                  @db.Timestamp(0)
  online                   Int                        @default(0) @db.UnsignedTinyInt
  expansion                Int                        @default(9) @db.UnsignedTinyInt
  mutetime                 BigInt                     @default(0)
  mutereason               String                     @default("") @db.VarChar(255)
  muteby                   String                     @default("") @db.VarChar(50)
  locale                   Int                        @default(0) @db.UnsignedTinyInt
  os                       String                     @default("") @db.VarChar(4)
  recruiter                Int                        @default(0) @db.UnsignedInt
  battlenet_account        Int?                       @db.UnsignedInt
  battlenet_index          Int?                       @db.UnsignedTinyInt
  battlenet_accounts       battlenet_accounts?        @relation(fields: [battlenet_account], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_bnet_acc")
  rbac_account_permissions rbac_account_permissions[]

  @@unique([battlenet_account, battlenet_index], map: "uk_bnet_acc")
}

model account_access {
  AccountID     Int     @db.UnsignedInt
  SecurityLevel Int     @db.UnsignedTinyInt
  RealmID       Int     @default(-1)
  Comment       String? @db.VarChar(255)

  @@id([AccountID, RealmID])
}

model account_banned {
  id        Int    @default(0) @db.UnsignedInt
  bandate   Int    @default(0) @db.UnsignedInt
  unbandate Int    @default(0) @db.UnsignedInt
  bannedby  String @db.VarChar(50)
  banreason String @db.VarChar(255)
  active    Int    @default(1) @db.UnsignedTinyInt

  @@id([id, bandate])
}

model account_last_played_character {
  accountId      Int     @db.UnsignedInt
  region         Int     @db.UnsignedTinyInt
  battlegroup    Int     @db.UnsignedTinyInt
  realmId        Int?    @db.UnsignedInt
  characterName  String? @db.VarChar(12)
  characterGUID  BigInt? @db.UnsignedBigInt
  lastPlayedTime Int?    @db.UnsignedInt

  @@id([accountId, region, battlegroup])
}

model account_muted {
  guid       Int    @default(0) @db.UnsignedInt
  mutedate   Int    @default(0) @db.UnsignedInt
  mutetime   Int    @default(0) @db.UnsignedInt
  mutedby    String @db.VarChar(50)
  mutereason String @db.VarChar(255)

  @@id([guid, mutedate])
}

model autobroadcast {
  realmid Int    @default(-1)
  id      Int    @default(autoincrement()) @db.UnsignedTinyInt
  weight  Int?   @default(1) @db.UnsignedTinyInt
  text    String @db.LongText

  @@id([id, realmid])
}

model battle_pet_declinedname {
  guid          BigInt      @id
  genitive      String      @default("") @db.VarChar(12)
  dative        String      @default("") @db.VarChar(12)
  accusative    String      @default("") @db.VarChar(12)
  instrumental  String      @default("") @db.VarChar(12)
  prepositional String      @default("") @db.VarChar(12)
  battle_pets   battle_pets @relation(fields: [guid], references: [guid], onUpdate: Restrict, map: "fk_battle_pet__battle_pet_declinedname")
}

model battle_pet_slots {
  id                 Int    @db.TinyInt
  battlenetAccountId Int
  battlePetGuid      BigInt
  locked             Int    @default(1) @db.TinyInt

  @@id([id, battlenetAccountId])
}

model battle_pets {
  guid                    BigInt                   @id
  battlenetAccountId      Int
  species                 Int
  breed                   Int                      @db.SmallInt
  displayId               Int                      @default(0)
  level                   Int                      @default(1) @db.SmallInt
  exp                     Int                      @default(0) @db.SmallInt
  health                  Int                      @default(1)
  quality                 Int                      @default(0) @db.TinyInt
  flags                   Int                      @default(0) @db.SmallInt
  name                    String                   @db.VarChar(12)
  nameTimestamp           BigInt                   @default(0)
  owner                   BigInt?
  ownerRealmId            Int?
  battle_pet_declinedname battle_pet_declinedname?
}

model battlenet_account_bans {
  id        Int    @default(0) @db.UnsignedInt
  bandate   Int    @default(0) @db.UnsignedInt
  unbandate Int    @default(0) @db.UnsignedInt
  bannedby  String @db.VarChar(50)
  banreason String @db.VarChar(255)

  @@id([id, bandate])
}

model battlenet_account_heirlooms {
  accountId Int @db.UnsignedInt
  itemId    Int @default(0) @db.UnsignedInt
  flags     Int @default(0) @db.UnsignedInt

  @@id([accountId, itemId])
}

model battlenet_account_mounts {
  battlenetAccountId Int @db.UnsignedInt
  mountSpellId       Int @db.UnsignedInt
  flags              Int @default(0) @db.UnsignedTinyInt

  @@id([battlenetAccountId, mountSpellId])
}

model battlenet_account_toys {
  accountId   Int      @db.UnsignedInt
  itemId      Int      @default(0)
  isFavourite Boolean? @default(false)
  hasFanfare  Boolean? @default(false)

  @@id([accountId, itemId])
}

model battlenet_account_transmog_illusions {
  battlenetAccountId Int                @db.UnsignedInt
  blobIndex          Int                @db.UnsignedSmallInt
  illusionMask       Int                @default(0) @db.UnsignedInt
  battlenet_accounts battlenet_accounts @relation(fields: [battlenetAccountId], references: [id], onUpdate: Restrict, map: "battlenet_account_transmog_illusions_ibfk_1")

  @@id([battlenetAccountId, blobIndex])
}

model battlenet_accounts {
  id                                   Int                                    @id @default(autoincrement()) @db.UnsignedInt
  email                                String                                 @db.VarChar(320)
  sha_pass_hash                        String                                 @default("") @db.VarChar(64)
  joindate                             DateTime                               @default(now()) @db.Timestamp(0)
  last_ip                              String                                 @default("127.0.0.1") @db.VarChar(15)
  failed_logins                        Int                                    @default(0) @db.UnsignedInt
  locked                               Int                                    @default(0) @db.UnsignedTinyInt
  lock_country                         String                                 @default("00") @db.VarChar(2)
  last_login                           DateTime?                              @db.Timestamp(0)
  online                               Int                                    @default(0) @db.UnsignedTinyInt
  locale                               Int                                    @default(0) @db.UnsignedTinyInt
  os                                   String                                 @default("") @db.VarChar(4)
  LastCharacterUndelete                Int                                    @default(0) @db.UnsignedInt
  LoginTicket                          String?                                @db.VarChar(64)
  LoginTicketExpiry                    Int?                                   @db.UnsignedInt
  account                              account[]
  battlenet_account_transmog_illusions battlenet_account_transmog_illusions[]
  battlenet_item_appearances           battlenet_item_appearances[]
  battlenet_item_favorite_appearances  battlenet_item_favorite_appearances[]
}

model battlenet_item_appearances {
  battlenetAccountId Int                @db.UnsignedInt
  blobIndex          Int                @db.UnsignedSmallInt
  appearanceMask     Int                @default(0) @db.UnsignedInt
  battlenet_accounts battlenet_accounts @relation(fields: [battlenetAccountId], references: [id], onUpdate: Restrict, map: "fk_battlenet_item_appearances")

  @@id([battlenetAccountId, blobIndex])
}

model battlenet_item_favorite_appearances {
  battlenetAccountId       Int                @db.UnsignedInt
  itemModifiedAppearanceId Int                @db.UnsignedInt
  battlenet_accounts       battlenet_accounts @relation(fields: [battlenetAccountId], references: [id], onUpdate: Restrict, map: "fk_battlenet_item_favorite_appearances")

  @@id([battlenetAccountId, itemModifiedAppearanceId])
}

model build_info {
  build           Int     @id
  majorVersion    Int?
  minorVersion    Int?
  bugfixVersion   Int?
  hotfixVersion   String? @db.Char(3)
  winAuthSeed     String? @db.VarChar(32)
  win64AuthSeed   String? @db.VarChar(32)
  mac64AuthSeed   String? @db.VarChar(32)
  winChecksumSeed String? @db.VarChar(40)
  macChecksumSeed String? @db.VarChar(40)
}

model ip_banned {
  ip        String @default("127.0.0.1") @db.VarChar(15)
  bandate   Int    @db.UnsignedInt
  unbandate Int    @db.UnsignedInt
  bannedby  String @default("[Console]") @db.VarChar(50)
  banreason String @default("no reason") @db.VarChar(255)

  @@id([ip, bandate])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model logs {
  time   Int     @db.UnsignedInt
  realm  Int     @db.UnsignedInt
  type   String  @db.VarChar(250)
  level  Int     @default(0) @db.UnsignedTinyInt
  string String? @db.MediumText

  @@ignore
}

model logs_ip_actions {
  id             Int      @id @default(autoincrement()) @db.UnsignedInt
  account_id     Int      @db.UnsignedInt
  character_guid BigInt   @db.UnsignedBigInt
  realm_id       Int      @default(0) @db.UnsignedInt
  type           Int      @db.UnsignedTinyInt
  ip             String   @default("127.0.0.1") @db.VarChar(15)
  systemnote     String?  @db.Text
  unixtime       Int      @db.UnsignedInt
  time           DateTime @default(now()) @db.Timestamp(0)
  comment        String?  @db.Text
}

model rbac_account_permissions {
  accountId        Int              @db.UnsignedInt
  permissionId     Int              @db.UnsignedInt
  granted          Boolean          @default(true)
  realmId          Int              @default(-1)
  account          account          @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk__rbac_account_permissions__account")
  rbac_permissions rbac_permissions @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk__rbac_account_roles__rbac_permissions")

  @@id([accountId, permissionId, realmId])
  @@index([permissionId], map: "fk__rbac_account_roles__rbac_permissions")
}

model rbac_default_permissions {
  secId            Int              @db.UnsignedInt
  permissionId     Int              @db.UnsignedInt
  realmId          Int              @default(-1)
  rbac_permissions rbac_permissions @relation(fields: [permissionId], references: [id], onUpdate: Restrict, map: "fk__rbac_default_permissions__rbac_permissions")

  @@id([secId, permissionId, realmId])
  @@index([permissionId], map: "fk__rbac_default_permissions__rbac_permissions")
}

model rbac_linked_permissions {
  id                                                                  Int              @db.UnsignedInt
  linkedId                                                            Int              @db.UnsignedInt
  rbac_permissions_rbac_linked_permissions_idTorbac_permissions       rbac_permissions @relation("rbac_linked_permissions_idTorbac_permissions", fields: [id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk__rbac_linked_permissions__rbac_permissions1")
  rbac_permissions_rbac_linked_permissions_linkedIdTorbac_permissions rbac_permissions @relation("rbac_linked_permissions_linkedIdTorbac_permissions", fields: [linkedId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk__rbac_linked_permissions__rbac_permissions2")

  @@id([id, linkedId])
  @@index([id], map: "fk__rbac_linked_permissions__rbac_permissions1")
  @@index([linkedId], map: "fk__rbac_linked_permissions__rbac_permissions2")
}

model rbac_permissions {
  id                                                                         Int                        @id @default(0) @db.UnsignedInt
  name                                                                       String                     @db.VarChar(100)
  rbac_account_permissions                                                   rbac_account_permissions[]
  rbac_default_permissions                                                   rbac_default_permissions[]
  rbac_linked_permissions_rbac_linked_permissions_idTorbac_permissions       rbac_linked_permissions[]  @relation("rbac_linked_permissions_idTorbac_permissions")
  rbac_linked_permissions_rbac_linked_permissions_linkedIdTorbac_permissions rbac_linked_permissions[]  @relation("rbac_linked_permissions_linkedIdTorbac_permissions")
}

model realmcharacters {
  realmid  Int @default(0) @db.UnsignedInt
  acctid   Int @db.UnsignedInt
  numchars Int @default(0) @db.UnsignedTinyInt

  @@id([realmid, acctid])
  @@index([acctid], map: "acctid")
}

model realmlist {
  id                   Int    @id @default(autoincrement()) @db.UnsignedInt
  name                 String @unique(map: "idx_name") @default("") @db.VarChar(32)
  address              String @default("127.0.0.1") @db.VarChar(255)
  localAddress         String @default("127.0.0.1") @db.VarChar(255)
  localSubnetMask      String @default("255.255.255.0") @db.VarChar(255)
  port                 Int    @default(8085) @db.UnsignedSmallInt
  icon                 Int    @default(0) @db.UnsignedTinyInt
  flag                 Int    @default(2) @db.UnsignedTinyInt
  timezone             Int    @default(0) @db.UnsignedTinyInt
  allowedSecurityLevel Int    @default(0) @db.UnsignedTinyInt
  population           Float  @default(0) @db.Float
  gamebuild            Int    @default(48526) @db.UnsignedInt
  Region               Int    @default(1) @db.UnsignedTinyInt
  Battlegroup          Int    @default(1) @db.UnsignedTinyInt
}

model secret_digest {
  id     Int    @id @db.UnsignedInt
  digest String @db.VarChar(100)
}

model updates {
  name      String        @id @db.VarChar(200)
  hash      String?       @default("") @db.Char(40)
  state     updates_state @default(RELEASED)
  timestamp DateTime      @default(now()) @db.Timestamp(0)
  speed     Int           @default(0) @db.UnsignedInt
}

model updates_include {
  path  String                @id @db.VarChar(200)
  state updates_include_state @default(RELEASED)
}

model uptime {
  realmid    Int    @db.UnsignedInt
  starttime  Int    @default(0) @db.UnsignedInt
  uptime     Int    @default(0) @db.UnsignedInt
  maxplayers Int    @default(0) @db.UnsignedSmallInt
  revision   String @default("Trinitycore") @db.VarChar(255)

  @@id([realmid, starttime])
}

enum updates_include_state {
  RELEASED
  ARCHIVED
}

enum updates_state {
  RELEASED
  ARCHIVED
}
